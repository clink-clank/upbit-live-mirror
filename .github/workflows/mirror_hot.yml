name: Mirror Upbit Materials (hot, single-file)
on:
  workflow_dispatch:
    inputs:
      chunk:
        description: "Markets per chunk"
        required: false
        default: "15"
  schedule:
    - cron: "*/5 * * * *"  # every 5 minutes

jobs:
  mirror:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    env:
      UA: GA-mirror/1.1
      BASE: https://api.shenqn.uk
      CHUNK: ${{ github.event.inputs.chunk || '15' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Build KRW market list (from Upbit public API)
        shell: bash
        run: |
          set -euo pipefail
          curl -4fsSL "https://api.upbit.com/v1/market/all?isDetails=false" -H "User-Agent: $UA"             | jq -r '.[].market' | grep '^KRW-' > markets.txt
          echo "::notice title=KRW markets::$(wc -l < markets.txt)"

      - name: Fetch materials in chunks (robust)
        shell: bash
        run: |
          set -euo pipefail
          rm -rf parts && mkdir -p parts
          mapfile -t ARR < markets.txt
          n=${#ARR[@]}
          echo "::group::Chunk plan"; echo "total_markets=$n  chunk_size=$CHUNK"; echo "::endgroup::"
          i=0; idx=1
          while [ $i -lt $n ]; do
            part=$(IFS=,; printf "%s" "${ARR[*]:i:CHUNK}")
            enc_part=$(printf '%s' "$part" | jq -sRr @uri)
            out="parts/part_${idx}.json"
            ok=0
            for attempt in 1 2 3 4 5 6 7 8; do
              delay=$(python3 - <<'PY' "$attempt"
import random,sys
a=int(sys.argv[1])
base=[0.0,0.6,1.0,1.7,3.0,5.0,8.0,13.0][a-1]
print(base+random.uniform(0,0.7))
PY
)
              echo "attempt=$attempt sleep=${delay}s"; sleep "$delay"
              url="${BASE}/materials.json?mode=selected&full=1&markets=${enc_part}"
              code=$(curl -4sS -H "User-Agent: $UA" -H "Accept: application/json" -w "%{http_code}" -o "$out.tmp" --max-time 40 "$url" || true)
              echo "HTTP=$code"
              if [ "$code" = "200" ] && jq -e '(.markets|type=="array") and (.markets|length>=1)' "$out.tmp" >/dev/null 2>&1; then
                mv "$out.tmp" "$out"; ok=1; break
              fi
            done
            [ "$ok" = "1" ] || { echo "::warning title=Chunk failed::part_${idx}"; rm -f "$out.tmp"; }
            i=$((i+CHUNK)); idx=$((idx+1))
          done
          ls -1 parts/part_*.json 2>/dev/null | sort > parts/list.txt || true
          echo "::notice title=Parts fetched::$(wc -l < parts/list.txt || echo 0)"

      - name: Validate parts (filter good/bad)
        shell: bash
        run: |
          set -euo pipefail
          : > parts/valid_list.txt
          : > parts/invalid_list.txt
          if [ -s parts/list.txt ]; then
            while read -r f; do
              if jq -e '(.markets|type=="array") and (.markets|length>=1)' "$f" >/dev/null 2>&1; then
                echo "$f" >> parts/valid_list.txt
              else
                echo "$f" >> parts/invalid_list.txt
              fi
            done < parts/list.txt
          fi
          echo "::notice title=Valid parts::$(wc -l < parts/valid_list.txt || echo 0)"
          if [ -s parts/invalid_list.txt ]; then
            echo "::warning title=Invalid parts (showing up to 5)::$(wc -l < parts/invalid_list.txt)"
            sed -n '1,5p' parts/invalid_list.txt
          fi
          if [ ! -s parts/valid_list.txt ]; then
            echo "::error title=No valid parts::All fetched parts failed validation"
            exit 5
          fi

      - name: Merge parts → LLM_MATERIALS.json (and verify)
        shell: bash
        run: |
          set -euo pipefail
          files=$(cat parts/valid_list.txt)
          jq -s '
            def valid: type=="object" and (.markets|type=="array");
            def GOOD: [ .[] | select(valid) ];
            def M: [ GOOD[] | .markets[] ];
            def FIRST: (GOOD | first) // {};
            {
              version:    (FIRST.version // "LLM_MATERIALS_V1"),
              timestamps: (FIRST.timestamps // {kst:"",utc:""}),
              meta: (
                (FIRST.meta // {}) as $m
                | ($m + {params: (($m.params // {}) + {markets: (M | map(.market) | unique)})})
              ),
              markets: (M | unique_by(.market))
            }' $files > LLM_MATERIALS.json
          total=$(jq '.markets|length' LLM_MATERIALS.json)
          echo "::notice title=Total merged markets::$total"
          [ "$total" -ge 60 ] || echo "::warning title=Low coverage::merged markets=$total (<60)"
          ls -lh LLM_MATERIALS.json

      - name: Build static HTML snapshot (docs/materials.html)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p docs
          python3 - <<'PY'
import json,html,os
data=json.load(open('LLM_MATERIALS.json','r',encoding='utf-8'))
s=json.dumps(data, ensure_ascii=False, indent=2)
os.makedirs('docs', exist_ok=True)
with open('docs/materials.html','w',encoding='utf-8') as f:
    f.write('''<!doctype html>
<meta charset="utf-8">
<title>Upbit Materials Snapshot</title>
<style>
 body{font:14px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;margin:32px;max-width:1100px}
 pre{white-space:pre-wrap;word-wrap:break-word}
 .meta{color:#555;margin-bottom:16px}
 a{ text-decoration:none }
</style>
<h1>Upbit KRW Markets — Materials Snapshot</h1>
<p class="meta">Source: LLM_MATERIALS.json (auto-updated every 5m). This is a static HTML (no JS).</p>
<p><a href="https://raw.githubusercontent.com/${{ github.repository }}/main/LLM_MATERIALS.json">Download JSON</a></p>
<pre>''')
    f.write(html.escape(s))
    f.write("</pre>")
PY
          echo "Built docs/materials.html ($(wc -c < docs/materials.html) bytes)"

      - name: Commit if changed
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if ! git diff --quiet -- LLM_MATERIALS.json docs/materials.html; then
            git add LLM_MATERIALS.json docs/materials.html
            git commit -m "chore(mirror): update LLM_MATERIALS.json & materials.html"
            git push
            echo "::notice title=Commit::Pushed updated materials"
          else
            echo "::notice title=Commit::No changes to commit"
          fi
